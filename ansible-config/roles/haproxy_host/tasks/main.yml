# -*- coding: utf-8; indent-tabs-mode: nil; tab-width: 2; -*-

---
- name: Install required packages
  package:
    name:
      - haproxy
    state: present
  tags:
    - haproxy_host

- name: Put SELinux in permissive mode, logging actions that would be blocked.
  ansible.posix.selinux:
    policy: targeted
    state: permissive

- name: Create certs directory if it does not exist
  file:
    path: /etc/pki/tls/certs
    state: directory
    mode: '0755'
  tags:
    - haproxy_host

- name: Generate an OpenSSL private key for HAProxy
  openssl_privatekey:
    path: /etc/pki/tls/private/haproxy.key
  tags:
    - tls
    - haproxy_host

- name: Generate an OpenSSL Certificate Signing Request for HAProxy
  openssl_csr:
    path: /etc/pki/tls/certs/haproxy.csr
    privatekey_path: /etc/pki/tls/private/haproxy.key
    common_name: "{{ inventory_hostname }}"
  tags:
    - tls
    - haproxy_host

- name: Generate a Self Signed OpenSSL certificate for HAProxy
  openssl_certificate:
    path: /etc/pki/tls/certs/haproxy.crt
    privatekey_path: /etc/pki/tls/private/haproxy.key
    csr_path: /etc/pki/tls/certs/haproxy.csr
    provider: selfsigned
  tags:
    - tls
    - haproxy_host

- name:  Generate a Self Signed OpenSSL bundle
  shell: cat /etc/pki/tls/certs/haproxy.crt /etc/pki/tls/private/haproxy.key > /etc/pki/tls/certs/haproxy.pem
  become: yes
  args:
    creates: /etc/pki/tls/certs/haproxy.pem"
  notify: reload haproxy
  tags:
    - tls
    - haproxy_host

- name: Selecting initial server from inventory
  set_fact:
    initial_server: "{{ hostvars.values() | selectattr('initial_server', 'defined') }}"

- name: Configure HAProxy
  vars:
    backend_servers: "{{ groups['rke2_nodes'] }}"
  template: src=haproxy.cfg dest=/etc/haproxy/haproxy.cfg
  notify: reload haproxy
  tags:
    - haproxy_host

- name: Enable and start HAProxy
  service: name=haproxy state=started enabled=yes
  tags:
    - haproxy_host

- name: Gather service facts
  service_facts:

- name: Stop Firewall
  systemd:
    service: firewalld
    enabled: false
    state: stopped
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service']['status'] != 'not-found'
