# RKE2 prerequisites
- name: Add first server IP to hosts
  lineinfile:
    path: /etc/hosts
    state: present
    line: "{{ rke2_initial_server_ip }}    {{ rke2_initial_server_hostname }}"
  when:
    - setup_hosts_file | default(true) | bool
    - not (initial_server | default(false) | bool)

- name: Gather service facts
  service_facts:

- name: Setup network manager
  blockinfile:
    path: /etc/NetworkManager/conf.d/rke2-canal.conf
    create: yes
    state: present
    block: |
      [keyfile]
      unmanaged-devices=interface-name:cali*;interface-name:flannel*

- name: Reload Network manager
  systemd:
    service: NetworkManager
    state: reloaded
  when: ansible_facts.services['NetworkManager.service'] is defined

- name: Stop FireWall
  systemd:
    service: firewalld
    enabled: false
    state: stopped
  when: ansible_facts.services['firewalld.service'] is defined

# RKE2 server setup
- name: Upload RKE2 installer
  copy:
    src: rke2/rke2-install.sh
    dest: /tmp/rke2-install.sh

- name: Run installer
  command: sh /tmp/rke2-install.sh
  environment: "{{ proxy_env | default({}) }}"

- name: Create config file for first server
  lineinfile:
    path: /etc/rancher/rke2/config.yaml
    create: yes
    state: present
    line: "token: {{ rke2_shared_token }}"
  when: initial_server | default(false) | bool

- name: Create config file for other servers
  blockinfile:
    path: /etc/rancher/rke2/config.yaml
    create: yes
    state: present
    block: |
      server: https://{{ rke2_initial_server_hostname }}:9345
      token: {{ rke2_shared_token }}
  when: not (initial_server | default(false) | bool)

- name: Enable RKE2 server
  systemd:
    service: rke2-server.service
    enabled: yes

- name: Start RKE2 initial server
  systemd:
    service: rke2-server.service
    state: started
  # It is required to run initial server before others
  when: initial_server | default(false) | bool

- name: Start RKE2 additional servers
  throttle: 1
  systemd:
    service: rke2-server.service
    state: started
  when: not (initial_server | default(false) | bool)

- name: Link kubectl binary
  file:
    src: /var/lib/rancher/rke2/bin/kubectl
    dest: /bin/kubectl
    state: link

- name: Check status of the cluster nodes
  command: kubectl get nodes
  register: nodes_status
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: true

- name: View k8s nodes
  debug:
    msg: "{{ nodes_status.stdout }}"
  run_once: true

- name: Copy custom NGINX controller config
  copy:
    src: rke2/nginx-helm-chart-config.yaml
    dest: /var/lib/rancher/rke2/server/manifests/rke2-ingress-nginx-config.yaml
